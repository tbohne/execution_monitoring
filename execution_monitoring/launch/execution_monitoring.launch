<?xml version="1.0" ?>

<launch>
    <!--#############################################################################################################-->
    <!--########################################## PLAN GENERATION ##################################################-->
    <!--#############################################################################################################-->
    <!-- generates and provides handcrafted plans as a service -->
    <include file="$(find plan_generation)/launch/plan_generation.launch"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--####################################### AUTONOMOUS (UN)DOCKING ##############################################-->
    <!--#############################################################################################################-->
    <!-- control software to navigate autonomously to an inductive charging station inside a mobile container -->
    <include file="$(find arox_docking)/launch/docking.launch"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--########################################## MONGODB + LOGGING ################################################-->
    <!--#############################################################################################################-->
    <arg name="default_path" default="/home/docker/ROS_db"/>
    <arg name="default_port" default="62345"/>
    <include file="$(find mongodb_store)/launch/mongodb_store.launch">
        <arg name="db_path" value="$(arg default_path)"/>
        <arg name="port" value="$(arg default_port)"/>
    </include>
    <!-- data accumulation for LTA experiments -->
    <node pkg="execution_monitoring" type="data_accumulator.py" name="data_accumulator" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--######################################## EXECUTION MONITORING SMACH #########################################-->
    <!--#############################################################################################################-->
    <!-- state machine providing plan execution and monitoring for LTA mobile outdoor robots -->
    <node pkg="execution_monitoring" type="high_level_smach.py" name="high_level_smach" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--############################################# DUMMY SCANNER #################################################-->
    <!--#############################################################################################################-->
    <!-- fake RIEGL publisher (republishes Velodyne scans) + dummy scanner -->
    <node pkg="execution_monitoring" type="republish_velodyne.py" name="republish_velodyne" output="screen"/>
    <node pkg="execution_monitoring" type="dummy_scanner.py" name="dummy_scanner" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--########################################## FAILURE RESOLUTION ###############################################-->
    <!--#############################################################################################################-->
    <node pkg="execution_monitoring" type="resolver.py" name="failure_resolver" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--########################################### FAILURE SIMULATION ##############################################-->
    <!--#############################################################################################################-->
    <node pkg="execution_monitoring" type="physics_controller.py" name="physics_controller" output="screen"/>
    <node pkg="execution_monitoring" type="obstacle_spawner.py" name="obstacle_spawner" output="screen"/>
    <node pkg="execution_monitoring" type="gnss_simulator.py" name="gnss_simulator" output="screen"/>
    <node pkg="execution_monitoring" type="battery_failure_simulator.py" name="battery_failure_simulator"
          output="screen"/>
    <node pkg="execution_monitoring" type="charging_failure_simulator.py" name="charging_failure_simulator"
          output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--############################################# MONITORING NODES ##############################################-->
    <!--#############################################################################################################-->
    <node pkg="execution_monitoring" type="plan_deployment_monitoring.py" name="plan_deployment_monitoring"
          output="screen"/>
    <node pkg="execution_monitoring" type="sensor_monitoring.py" name="sensor_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="connection_monitoring.py" name="connection_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="weather_monitoring.py" name="weather_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="data_monitoring.py" name="data_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="internet_monitoring.py" name="internet_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="wifi_monitor.py" name="wifi_monitor" output="screen"/>
    <node pkg="execution_monitoring" type="localization_monitoring.py" name="localization_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="navigation_monitoring.py" name="navigation_monitoring" output="screen"/>
    <node pkg="execution_monitoring" type="charging_failure_monitoring.py" name="charging_failure_monitoring"
          output="screen"/>
    <node pkg="execution_monitoring" type="power_management_monitoring.py" name="power_management_monitoring"
          output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--################################# BATTERY MODEL - ENERGY CONSUMPTION ########################################-->
    <!--#############################################################################################################-->
    <node pkg="arox_engine" type="arox_battery.py" name="arox_battery" output="screen"/>
    <node pkg="arox_performance_parameters" type="battery_dynamics.py" name="battery_dynamics" output="screen"/>
    <node pkg="arox_performance_parameters" type="arox_params.py" name="arox_parameters" output="screen"/>
    <node pkg="arox_performance_parameters" type="arox_safety_thresholds.py" name="arox_watchdog" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--########################################### LTA EXPERIMENTS #################################################-->
    <!--#############################################################################################################-->
    <node pkg="execution_monitoring" type="experiments.py" name="experiments" output="screen"/>
    <node pkg="execution_monitoring" type="mission_monitoring.py" name="mission_monitoring" output="screen"/>
    <!--#############################################################################################################-->

    <!--#############################################################################################################-->
    <!--######################################## POINTCLOUD-TO-LASERSCAN ############################################-->
    <!--#############################################################################################################-->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan"
          respawn="true" output="screen">
        <param name="concurrency_level" value="2"/>
        <param name="queue_size" value="2"/>
        <param name="min_height" value="0.1"/>
        <param name="max_height" value="2.5"/>
        <param name="angle_increment" value="0.008"/>
        <param name="scan_time" value="0.1"/>
        <param name="range_min" value="0.05"/>
        <param name="range_max" value="80.0"/>
        <param name="angle_min" value="-4.712"/>
        <param name="angle_max" value="4.712"/>

        <remap from="scan" to="/RIEGL"/>
        <remap from="cloud_in" to="/velodyne_points"/>
    </node>
    <!--#############################################################################################################-->

</launch>
